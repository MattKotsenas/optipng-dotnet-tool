name: Build & Test

on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - main
  pull_request:
    branches: [main]
  release:
    types:
      - published # Run the workflow when a new GitHub release is published

jobs:
  build:
    strategy:
      matrix:
        os: [windows-2022, ubuntu-22.04, macos-12]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        global-json-file: ./global.json

    - name: NuGet Restore
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore
    
    - name: Test
      run: dotnet test --no-build --verbosity normal

  publish:
    if: github.event_name == 'release' # Publish only when creating a GitHub Release
    runs-on: ubuntu-22.04
    needs: [build]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        global-json-file: ./global.json

    - name: NuGet Restore
      run: dotnet restore

    - name: Pack
      # Force a 'public' release pack, as GitHub release triggers don't populate branch info, so our version tool may
      # not know if the package is for public consumption or not
      run: dotnet pack --no-restore /p:PublicRelease=true

    # Publish all NuGet packages. Use --skip-duplicate to prevent errors if a package with the same version already exists.
    - name: Publish NuGet package
      shell: pwsh
      run: |
        foreach ($file in (Get-ChildItem ./artifacts/package -Recurse -Include *.nupkg)) {
          echo "NuGet publish for file: '$file'"
          dotnet nuget push $file --api-key "${{ secrets.NUGET_API_KEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
        }